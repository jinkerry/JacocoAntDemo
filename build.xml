<project xmlns:jacoco="antlib:org.jacoco.ant" name="Example Ant Build with JaCoCo" default="rebuild">
    <description>
        Example Ant build file that demonstrates how a JaCoCo coverage report can be itegrated into an existing build in three simple steps.
    </description>
    <property name="src.dir" location="./src/main/java"/>
    <property name="test.dir" location="./src/test/java"/>
    <property name="result.dir" location="./target"/>
    <property name="lib" location="./lib"/>
    <property name="test.report.dir" location="./junit_report"/>
    <property name="result.classes.dir" location="${result.dir}/classes"/>
    <property name="result.report.dir" location="${result.dir}/site/jacoco"/>
    <property name="result.exec.file" location="${result.dir}/jacoco.exec"/>
    <!--  Step 1: Import JaCoCo Ant tasks  -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib/jacocoant.jar"/>
    </taskdef>

    <path id="compile-path">
        <pathelement location="${result.classes.dir}" />
        <fileset dir="${lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="run-test-path">
        <path refid="compile-path" />
        <pathelement location="${result.classes.dir}" />
    </path>


    <target name="clean">
        <delete dir="${result.dir}"/>
    </target>
    <target name="compile">
        <mkdir dir="${result.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${result.classes.dir}" debug="on" includeantruntime="false"/>
        <javac classpath="lib/junit-4.10.jar" srcdir="${test.dir}" destdir="${result.classes.dir}" debug="on" includeantruntime="false"/>
    </target>

    <target name="coverage" depends="compile">
        <jacoco:coverage destfile="${result.exec.file}">
            <junit fork="true" printsummary="on">
                <classpath refid="run-test-path"/>
                <batchtest todir="${test.report.dir}">
                    <fileset dir="${result.classes.dir}" includes="**/*Test.class">
                    </fileset>
                </batchtest>
                <formatter type="xml"/>
            </junit>
        </jacoco:coverage>
    </target>

    <target name="report" depends="coverage">
        <!--  Step 3: Create coverage report  -->
        <jacoco:report>
            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="${result.exec.file}"/>
            </executiondata>
            <!--  the class files and optional source files ...  -->
            <structure name="JaCoCo Ant Example">
                <classfiles>
                    <fileset dir="${result.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="src"/>
                </sourcefiles>
            </structure>
            <!--  to produce reports in different formats.  -->
            <html destdir="${result.report.dir}"/>
            <csv destfile="${result.report.dir}/report.csv"/>
            <xml destfile="${result.report.dir}/report.xml"/>
        </jacoco:report>
    </target>
    <target name="rebuild" depends="clean,compile,coverage,report"/>
</project>